pipe() and dup()
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void) {
    int pipefd[2]; // file descriptors for the pipe
    int status;

    // create the pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // fork a child process to run "ls -l" command
    pid_t pid1 = fork();
    if (pid1 == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid1 == 0) {
        // child process - redirect stdout to the write end of the pipe
        close(STDOUT_FILENO);
        dup(pipefd[1]);
        close(pipefd[0]);
        close(pipefd[1]);

        // run "ls -l" command
        execlp("ls", "ls", "-l", NULL);
        perror("execlp");
        exit(EXIT_FAILURE);
    }

    // fork another child process to run "wc -l" command
    pid_t pid2 = fork();
    if (pid2 == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid2 == 0) {
        // child process - redirect stdin to the read end of the pipe
        close(STDIN_FILENO);
        dup(pipefd[0]);
        close(pipefd[0]);
        close(pipefd[1]);

        // run "wc -l" command
        execlp("wc", "wc", "-l", NULL);
        perror("execlp");
        exit(EXIT_FAILURE);
    }

    // parent process - close the file descriptors and wait for the child processes to finish
    close(pipefd[0]);
    close(pipefd[1]);
    waitpid(pid1, &status, 0);
    waitpid(pid2, &status, 0);

    return 0;
}
$ gcc pipe_ls_wc.c -o pipe_ls_wc

