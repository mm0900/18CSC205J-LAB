#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];
    pid_t pid;

    // create the pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        return 1;
    }

    // fork the process
    pid = fork();
    if (pid == -1) {
        perror("fork");
        return 1;
    }

    if (pid == 0) { // child process
        // close the read end of the pipe
        close(pipefd[0]);

        // redirect stdout to the write end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);
        close(pipefd[1]);

        // execute the ls -l command
        execl("/bin/ls", "ls", "-l", NULL);
        perror("execl");
        return 1;
    } else { // parent process
        // close the write end of the pipe
        close(pipefd[1]);

        // redirect stdin to the read end of the pipe
        dup2(pipefd[0], STDIN_FILENO);
        close(pipefd[0]);

        // execute the wc -l command
        execl("/usr/bin/wc", "wc", "-l", NULL);
        perror("execl");
        return 1;
    }

    // wait for the child process to exit
    wait(NULL);

    return 0;
}
